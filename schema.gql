# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregatePost {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
}

type AggregateReaction {
  _count: ReactionCountAggregate
  _max: ReactionMaxAggregate
  _min: ReactionMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type Mutation {
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReaction(data: [ReactionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createPost(data: PostCreateInput!): Post!
  createReaction(data: ReactionCreateInput!): Reaction!
  createUser(data: UserCreateInput!): User!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyReaction(where: ReactionWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteReaction(where: ReactionWhereUniqueInput!): Reaction
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyReaction(data: ReactionUpdateManyMutationInput!, where: ReactionWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateReaction(data: ReactionUpdateInput!, where: ReactionWhereUniqueInput!): Reaction
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertPost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertReaction(create: ReactionCreateInput!, update: ReactionUpdateInput!, where: ReactionWhereUniqueInput!): Reaction!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  Reactions(cursor: ReactionWhereUniqueInput, distinct: [ReactionScalarFieldEnum!], orderBy: [ReactionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionWhereInput): [Reaction!]!
  _count: PostCount
  dislikes: Int!
  id: String!
  likes: Int!
  parent: Post
  parentId: String
  replies(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  txt: String!
  user: User!
  userId: String!
}

type PostCount {
  Reactions: Int!
  replies: Int!
}

type PostCountAggregate {
  _all: Int!
  id: Int!
  parentId: Int!
  txt: Int!
  userId: Int!
}

input PostCountOrderByAggregateInput {
  id: SortOrder
  parentId: SortOrder
  txt: SortOrder
  userId: SortOrder
}

input PostCreateInput {
  Reactions: ReactionCreateNestedManyWithoutPostInput
  id: String
  parent: PostCreateNestedOneWithoutRepliesInput
  replies: PostCreateNestedManyWithoutParentInput
  txt: String!
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateManyInput {
  id: String
  parentId: String
  txt: String!
  userId: String!
}

input PostCreateManyParentInput {
  id: String
  txt: String!
  userId: String!
}

input PostCreateManyParentInputEnvelope {
  data: [PostCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyUserInput {
  id: String
  parentId: String
  txt: String!
}

input PostCreateManyUserInputEnvelope {
  data: [PostCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutParentInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutParentInput!]
  create: [PostCreateWithoutParentInput!]
  createMany: PostCreateManyParentInputEnvelope
}

input PostCreateNestedManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
}

input PostCreateNestedOneWithoutReactionsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutReactionsInput
  create: PostCreateWithoutReactionsInput
}

input PostCreateNestedOneWithoutRepliesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutRepliesInput
  create: PostCreateWithoutRepliesInput
}

input PostCreateOrConnectWithoutParentInput {
  create: PostCreateWithoutParentInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutReactionsInput {
  create: PostCreateWithoutReactionsInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutRepliesInput {
  create: PostCreateWithoutRepliesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutUserInput {
  create: PostCreateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutParentInput {
  Reactions: ReactionCreateNestedManyWithoutPostInput
  id: String
  replies: PostCreateNestedManyWithoutParentInput
  txt: String!
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutReactionsInput {
  id: String
  parent: PostCreateNestedOneWithoutRepliesInput
  replies: PostCreateNestedManyWithoutParentInput
  txt: String!
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutRepliesInput {
  Reactions: ReactionCreateNestedManyWithoutPostInput
  id: String
  parent: PostCreateNestedOneWithoutRepliesInput
  txt: String!
  user: UserCreateNestedOneWithoutPostsInput!
}

input PostCreateWithoutUserInput {
  Reactions: ReactionCreateNestedManyWithoutPostInput
  id: String
  parent: PostCreateNestedOneWithoutRepliesInput
  replies: PostCreateNestedManyWithoutParentInput
  txt: String!
}

type PostGroupBy {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  id: String!
  parentId: String
  txt: String!
  userId: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  id: String
  parentId: String
  txt: String
  userId: String
}

input PostMaxOrderByAggregateInput {
  id: SortOrder
  parentId: SortOrder
  txt: SortOrder
  userId: SortOrder
}

type PostMinAggregate {
  id: String
  parentId: String
  txt: String
  userId: String
}

input PostMinOrderByAggregateInput {
  id: SortOrder
  parentId: SortOrder
  txt: SortOrder
  userId: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  id: SortOrder
  parentId: SortOrder
  txt: SortOrder
  userId: SortOrder
}

input PostOrderByWithRelationInput {
  Reactions: ReactionOrderByRelationAggregateInput
  id: SortOrder
  parent: PostOrderByWithRelationInput
  parentId: SortOrder
  replies: PostOrderByRelationAggregateInput
  txt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  id
  parentId
  txt
  userId
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  id: StringFilter
  parentId: StringNullableFilter
  txt: StringFilter
  userId: StringFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  parentId: StringNullableWithAggregatesFilter
  txt: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input PostUpdateInput {
  Reactions: ReactionUpdateManyWithoutPostInput
  id: StringFieldUpdateOperationsInput
  parent: PostUpdateOneWithoutRepliesInput
  replies: PostUpdateManyWithoutParentInput
  txt: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  txt: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutParentInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutUserInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutParentInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutParentInput!]
  create: [PostCreateWithoutParentInput!]
  createMany: PostCreateManyParentInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [PostUpdateManyWithWhereWithoutParentInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutParentInput!]
}

input PostUpdateManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput!]
  create: [PostCreateWithoutUserInput!]
  createMany: PostCreateManyUserInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateOneRequiredWithoutReactionsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutReactionsInput
  create: PostCreateWithoutReactionsInput
  update: PostUpdateWithoutReactionsInput
  upsert: PostUpsertWithoutReactionsInput
}

input PostUpdateOneWithoutRepliesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutRepliesInput
  create: PostCreateWithoutRepliesInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutRepliesInput
  upsert: PostUpsertWithoutRepliesInput
}

input PostUpdateWithWhereUniqueWithoutParentInput {
  data: PostUpdateWithoutParentInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  data: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutParentInput {
  Reactions: ReactionUpdateManyWithoutPostInput
  id: StringFieldUpdateOperationsInput
  replies: PostUpdateManyWithoutParentInput
  txt: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutReactionsInput {
  id: StringFieldUpdateOperationsInput
  parent: PostUpdateOneWithoutRepliesInput
  replies: PostUpdateManyWithoutParentInput
  txt: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutRepliesInput {
  Reactions: ReactionUpdateManyWithoutPostInput
  id: StringFieldUpdateOperationsInput
  parent: PostUpdateOneWithoutRepliesInput
  txt: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutUserInput {
  Reactions: ReactionUpdateManyWithoutPostInput
  id: StringFieldUpdateOperationsInput
  parent: PostUpdateOneWithoutRepliesInput
  replies: PostUpdateManyWithoutParentInput
  txt: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutParentInput {
  create: PostCreateWithoutParentInput!
  update: PostUpdateWithoutParentInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  create: PostCreateWithoutUserInput!
  update: PostUpdateWithoutUserInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutReactionsInput {
  create: PostCreateWithoutReactionsInput!
  update: PostUpdateWithoutReactionsInput!
}

input PostUpsertWithoutRepliesInput {
  create: PostCreateWithoutRepliesInput!
  update: PostUpdateWithoutRepliesInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  Reactions: ReactionListRelationFilter
  id: StringFilter
  parent: PostRelationFilter
  parentId: StringNullableFilter
  replies: PostListRelationFilter
  txt: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateReaction(cursor: ReactionWhereUniqueInput, orderBy: [ReactionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionWhereInput): AggregateReaction!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstReaction(cursor: ReactionWhereUniqueInput, distinct: [ReactionScalarFieldEnum!], orderBy: [ReactionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionWhereInput): Reaction
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByWithAggregationInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByReaction(by: [ReactionScalarFieldEnum!]!, having: ReactionScalarWhereWithAggregatesInput, orderBy: [ReactionOrderByWithAggregationInput!], skip: Int, take: Int, where: ReactionWhereInput): [ReactionGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  reaction(where: ReactionWhereUniqueInput!): Reaction
  reactions(cursor: ReactionWhereUniqueInput, distinct: [ReactionScalarFieldEnum!], orderBy: [ReactionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionWhereInput): [Reaction!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Reaction {
  id: String!
  post: Post!
  postId: String!
  type: String!
  user: User!
  userId: String!
}

type ReactionCountAggregate {
  _all: Int!
  id: Int!
  postId: Int!
  type: Int!
  userId: Int!
}

input ReactionCountOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  type: SortOrder
  userId: SortOrder
}

input ReactionCreateInput {
  id: String
  post: PostCreateNestedOneWithoutReactionsInput!
  type: String!
  user: UserCreateNestedOneWithoutReactionsInput!
}

input ReactionCreateManyInput {
  id: String
  postId: String!
  type: String!
  userId: String!
}

input ReactionCreateManyPostInput {
  id: String
  type: String!
  userId: String!
}

input ReactionCreateManyPostInputEnvelope {
  data: [ReactionCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input ReactionCreateManyUserInput {
  id: String
  postId: String!
  type: String!
}

input ReactionCreateManyUserInputEnvelope {
  data: [ReactionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReactionCreateNestedManyWithoutPostInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutPostInput!]
  create: [ReactionCreateWithoutPostInput!]
  createMany: ReactionCreateManyPostInputEnvelope
}

input ReactionCreateNestedManyWithoutUserInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutUserInput!]
  create: [ReactionCreateWithoutUserInput!]
  createMany: ReactionCreateManyUserInputEnvelope
}

input ReactionCreateOrConnectWithoutPostInput {
  create: ReactionCreateWithoutPostInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateOrConnectWithoutUserInput {
  create: ReactionCreateWithoutUserInput!
  where: ReactionWhereUniqueInput!
}

input ReactionCreateWithoutPostInput {
  id: String
  type: String!
  user: UserCreateNestedOneWithoutReactionsInput!
}

input ReactionCreateWithoutUserInput {
  id: String
  post: PostCreateNestedOneWithoutReactionsInput!
  type: String!
}

type ReactionGroupBy {
  _count: ReactionCountAggregate
  _max: ReactionMaxAggregate
  _min: ReactionMinAggregate
  id: String!
  postId: String!
  type: String!
  userId: String!
}

input ReactionListRelationFilter {
  every: ReactionWhereInput
  none: ReactionWhereInput
  some: ReactionWhereInput
}

type ReactionMaxAggregate {
  id: String
  postId: String
  type: String
  userId: String
}

input ReactionMaxOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  type: SortOrder
  userId: SortOrder
}

type ReactionMinAggregate {
  id: String
  postId: String
  type: String
  userId: String
}

input ReactionMinOrderByAggregateInput {
  id: SortOrder
  postId: SortOrder
  type: SortOrder
  userId: SortOrder
}

input ReactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReactionOrderByWithAggregationInput {
  _count: ReactionCountOrderByAggregateInput
  _max: ReactionMaxOrderByAggregateInput
  _min: ReactionMinOrderByAggregateInput
  id: SortOrder
  postId: SortOrder
  type: SortOrder
  userId: SortOrder
}

input ReactionOrderByWithRelationInput {
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  type: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ReactionScalarFieldEnum {
  id
  postId
  type
  userId
}

input ReactionScalarWhereInput {
  AND: [ReactionScalarWhereInput!]
  NOT: [ReactionScalarWhereInput!]
  OR: [ReactionScalarWhereInput!]
  id: StringFilter
  postId: StringFilter
  type: StringFilter
  userId: StringFilter
}

input ReactionScalarWhereWithAggregatesInput {
  AND: [ReactionScalarWhereWithAggregatesInput!]
  NOT: [ReactionScalarWhereWithAggregatesInput!]
  OR: [ReactionScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  postId: StringWithAggregatesFilter
  type: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ReactionUpdateInput {
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutReactionsInput
  type: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReactionsInput
}

input ReactionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input ReactionUpdateManyWithWhereWithoutPostInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateManyWithWhereWithoutUserInput {
  data: ReactionUpdateManyMutationInput!
  where: ReactionScalarWhereInput!
}

input ReactionUpdateManyWithoutPostInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutPostInput!]
  create: [ReactionCreateWithoutPostInput!]
  createMany: ReactionCreateManyPostInputEnvelope
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutPostInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutPostInput!]
}

input ReactionUpdateManyWithoutUserInput {
  connect: [ReactionWhereUniqueInput!]
  connectOrCreate: [ReactionCreateOrConnectWithoutUserInput!]
  create: [ReactionCreateWithoutUserInput!]
  createMany: ReactionCreateManyUserInputEnvelope
  delete: [ReactionWhereUniqueInput!]
  deleteMany: [ReactionScalarWhereInput!]
  disconnect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionUpdateWithWhereUniqueWithoutPostInput {
  data: ReactionUpdateWithoutPostInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpdateWithWhereUniqueWithoutUserInput {
  data: ReactionUpdateWithoutUserInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpdateWithoutPostInput {
  id: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReactionsInput
}

input ReactionUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutReactionsInput
  type: StringFieldUpdateOperationsInput
}

input ReactionUpsertWithWhereUniqueWithoutPostInput {
  create: ReactionCreateWithoutPostInput!
  update: ReactionUpdateWithoutPostInput!
  where: ReactionWhereUniqueInput!
}

input ReactionUpsertWithWhereUniqueWithoutUserInput {
  create: ReactionCreateWithoutUserInput!
  update: ReactionUpdateWithoutUserInput!
  where: ReactionWhereUniqueInput!
}

input ReactionWhereInput {
  AND: [ReactionWhereInput!]
  NOT: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  id: StringFilter
  post: PostRelationFilter
  postId: StringFilter
  type: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReactionWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  Posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  Reactions(cursor: ReactionWhereUniqueInput, distinct: [ReactionScalarFieldEnum!], orderBy: [ReactionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionWhereInput): [Reaction!]!
  _count: UserCount
  bio: String
  id: String!
  name: String!
}

type UserCount {
  Posts: Int!
  Reactions: Int!
}

type UserCountAggregate {
  _all: Int!
  bio: Int!
  id: Int!
  name: Int!
}

input UserCountOrderByAggregateInput {
  bio: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserCreateInput {
  Posts: PostCreateNestedManyWithoutUserInput
  Reactions: ReactionCreateNestedManyWithoutUserInput
  bio: String
  id: String
  name: String!
}

input UserCreateManyInput {
  bio: String
  id: String
  name: String!
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutReactionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionsInput
  create: UserCreateWithoutReactionsInput
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReactionsInput {
  create: UserCreateWithoutReactionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  Reactions: ReactionCreateNestedManyWithoutUserInput
  bio: String
  id: String
  name: String!
}

input UserCreateWithoutReactionsInput {
  Posts: PostCreateNestedManyWithoutUserInput
  bio: String
  id: String
  name: String!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  bio: String
  id: String!
  name: String!
}

type UserMaxAggregate {
  bio: String
  id: String
  name: String
}

input UserMaxOrderByAggregateInput {
  bio: SortOrder
  id: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  bio: String
  id: String
  name: String
}

input UserMinOrderByAggregateInput {
  bio: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  bio: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  Posts: PostOrderByRelationAggregateInput
  Reactions: ReactionOrderByRelationAggregateInput
  bio: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  bio
  id
  name
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  bio: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input UserUpdateInput {
  Posts: PostUpdateManyWithoutUserInput
  Reactions: ReactionUpdateManyWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutReactionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionsInput
  create: UserCreateWithoutReactionsInput
  update: UserUpdateWithoutReactionsInput
  upsert: UserUpsertWithoutReactionsInput
}

input UserUpdateWithoutPostsInput {
  Reactions: ReactionUpdateManyWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutReactionsInput {
  Posts: PostUpdateManyWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserUpsertWithoutReactionsInput {
  create: UserCreateWithoutReactionsInput!
  update: UserUpdateWithoutReactionsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Posts: PostListRelationFilter
  Reactions: ReactionListRelationFilter
  bio: StringNullableFilter
  id: StringFilter
  name: StringFilter
}

input UserWhereUniqueInput {
  id: String
  name: String
}
